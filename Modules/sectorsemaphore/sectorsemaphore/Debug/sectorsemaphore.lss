
sectorsemaphore.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800060  00800060  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000450  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026c  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f4  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e2  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	a8 c0       	rjmp	.+336    	; 0x16c <__vector_13>
  1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__vector_14>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a8 38       	cpi	r26, 0x88	; 136
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	23 d0       	rcall	.+70     	; 0x82 <main>
  3c:	3e c1       	rjmp	.+636    	; 0x2ba <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <setup>:

uint16_t data;

void setup(void)
{
	usiTwiSlaveInit(I2C_SLAVE_ADDR);      // init I2C Slave mode
  40:	80 e3       	ldi	r24, 0x30	; 48
  42:	63 d0       	rcall	.+198    	; 0x10a <usiTwiSlaveInit>
	DDRB = (1<<DDB4)|(1<<DDB3)|(1<<DDB1);	//Pins 2, 3 and 6 (pb1, 2 and 4) as outputs
  44:	8a e1       	ldi	r24, 0x1A	; 26
  46:	87 bb       	out	0x17, r24	; 23
	PORTB = (0<<PB4)|(0<<PB3)|(0<<PB1);		//Initialize to 0
  48:	18 ba       	out	0x18, r1	; 24
	data = 0;
  4a:	10 92 87 00 	sts	0x0087, r1
  4e:	10 92 86 00 	sts	0x0086, r1
	sei();
  52:	78 94       	sei
  54:	08 95       	ret

00000056 <blink>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  56:	2f e9       	ldi	r18, 0x9F	; 159
  58:	86 e8       	ldi	r24, 0x86	; 134
  5a:	91 e0       	ldi	r25, 0x01	; 1
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	80 40       	sbci	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <blink+0x6>
  64:	00 c0       	rjmp	.+0      	; 0x66 <blink+0x10>
  66:	00 00       	nop
}

void blink(void)
{
	_delay_ms(500);
	PORTB = (0<<PB4);
  68:	18 ba       	out	0x18, r1	; 24
  6a:	2f e9       	ldi	r18, 0x9F	; 159
  6c:	86 e8       	ldi	r24, 0x86	; 134
  6e:	91 e0       	ldi	r25, 0x01	; 1
  70:	21 50       	subi	r18, 0x01	; 1
  72:	80 40       	sbci	r24, 0x00	; 0
  74:	90 40       	sbci	r25, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <blink+0x1a>
  78:	00 c0       	rjmp	.+0      	; 0x7a <blink+0x24>
  7a:	00 00       	nop
	_delay_ms(500);
	PORTB = (1<<PB4);
  7c:	80 e1       	ldi	r24, 0x10	; 16
  7e:	88 bb       	out	0x18, r24	; 24
  80:	08 95       	ret

00000082 <main>:
}

int main(void)
{
	unsigned char temp;
	setup();
  82:	de df       	rcall	.-68     	; 0x40 <setup>
					data = 1;
					PORTB = (0<<PB4)|(1<<PB3)|(0<<PB1);
					break;		
		        case 2:				//Yellow
					data = 2;
					PORTB = (0<<PB4)|(0<<PB3)|(1<<PB1);
  84:	68 94       	set
  86:	88 24       	eor	r8, r8
  88:	81 f8       	bld	r8, 1
					break;
		        case 3:				//Red
					data = 3;
					PORTB = (1<<PB4)|(0<<PB3)|(0<<PB1);
  8a:	68 94       	set
  8c:	99 24       	eor	r9, r9
  8e:	94 f8       	bld	r9, 4
					break;
				default:			//All of them, just if something goes wrong
					data = 99;
					PORTB = (1<<PB4)|(1<<PB3)|(1<<PB1);
  90:	0f 2e       	mov	r0, r31
  92:	fa e1       	ldi	r31, 0x1A	; 26
  94:	af 2e       	mov	r10, r31
  96:	f0 2d       	mov	r31, r0
		        case 1:				//Green
					data = 1;
					PORTB = (0<<PB4)|(1<<PB3)|(0<<PB1);
					break;		
		        case 2:				//Yellow
					data = 2;
  98:	68 94       	set
  9a:	cc 24       	eor	r12, r12
  9c:	c1 f8       	bld	r12, 1
  9e:	d1 2c       	mov	r13, r1
					PORTB = (0<<PB4)|(0<<PB3)|(1<<PB1);
					break;
		        case 3:				//Red
					data = 3;
  a0:	0f 2e       	mov	r0, r31
  a2:	f3 e0       	ldi	r31, 0x03	; 3
  a4:	ef 2e       	mov	r14, r31
  a6:	f1 2c       	mov	r15, r1
  a8:	f0 2d       	mov	r31, r0
					PORTB = (1<<PB4)|(0<<PB3)|(0<<PB1);
					break;
				default:			//All of them, just if something goes wrong
					data = 99;
  aa:	03 e6       	ldi	r16, 0x63	; 99
  ac:	10 e0       	ldi	r17, 0x00	; 0
        {
	        temp = usiTwiReceiveByte();
	        switch (temp)							// the case is selected by a single
	        {										// digit in the master code. (1,2 or 3)
		        case 1:				//Green
					data = 1;
  ae:	c1 e0       	ldi	r28, 0x01	; 1
  b0:	d0 e0       	ldi	r29, 0x00	; 0
					PORTB = (0<<PB4)|(1<<PB3)|(0<<PB1);
  b2:	68 94       	set
  b4:	bb 24       	eor	r11, r11
  b6:	b3 f8       	bld	r11, 3
	unsigned char temp;
	setup();
	
    while(1)
    {
        if(usiTwiDataInReceiveBuffer())
  b8:	50 d0       	rcall	.+160    	; 0x15a <usiTwiDataInReceiveBuffer>
  ba:	88 23       	and	r24, r24
  bc:	f1 f0       	breq	.+60     	; 0xfa <main+0x78>
        {
	        temp = usiTwiReceiveByte();
  be:	3a d0       	rcall	.+116    	; 0x134 <usiTwiReceiveByte>
	        switch (temp)							// the case is selected by a single
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	51 f0       	breq	.+20     	; 0xd8 <main+0x56>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	71 f0       	breq	.+28     	; 0xe4 <main+0x62>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 f4       	brne	.+36     	; 0xf0 <main+0x6e>
	        {										// digit in the master code. (1,2 or 3)
		        case 1:				//Green
					data = 1;
  cc:	d0 93 87 00 	sts	0x0087, r29
  d0:	c0 93 86 00 	sts	0x0086, r28
					PORTB = (0<<PB4)|(1<<PB3)|(0<<PB1);
  d4:	b8 ba       	out	0x18, r11	; 24
					break;		
  d6:	11 c0       	rjmp	.+34     	; 0xfa <main+0x78>
		        case 2:				//Yellow
					data = 2;
  d8:	d0 92 87 00 	sts	0x0087, r13
  dc:	c0 92 86 00 	sts	0x0086, r12
					PORTB = (0<<PB4)|(0<<PB3)|(1<<PB1);
  e0:	88 ba       	out	0x18, r8	; 24
					break;
  e2:	0b c0       	rjmp	.+22     	; 0xfa <main+0x78>
		        case 3:				//Red
					data = 3;
  e4:	f0 92 87 00 	sts	0x0087, r15
  e8:	e0 92 86 00 	sts	0x0086, r14
					PORTB = (1<<PB4)|(0<<PB3)|(0<<PB1);
  ec:	98 ba       	out	0x18, r9	; 24
					break;
  ee:	05 c0       	rjmp	.+10     	; 0xfa <main+0x78>
				default:			//All of them, just if something goes wrong
					data = 99;
  f0:	10 93 87 00 	sts	0x0087, r17
  f4:	00 93 86 00 	sts	0x0086, r16
					PORTB = (1<<PB4)|(1<<PB3)|(1<<PB1);
  f8:	a8 ba       	out	0x18, r10	; 24
					break;
	        }

        }
		
		if (data == 3)
  fa:	80 91 86 00 	lds	r24, 0x0086
  fe:	90 91 87 00 	lds	r25, 0x0087
 102:	03 97       	sbiw	r24, 0x03	; 3
 104:	c9 f6       	brne	.-78     	; 0xb8 <main+0x36>
		{
			blink();
 106:	a7 df       	rcall	.-178    	; 0x56 <blink>
 108:	d4 cf       	rjmp	.-88     	; 0xb2 <main+0x30>

0000010a <usiTwiSlaveInit>:
void
flushTwiBuffers(
  void
)
{
  rxTail = 0;
 10a:	10 92 72 00 	sts	0x0072, r1
  rxHead = 0;
 10e:	10 92 73 00 	sts	0x0073, r1
  txTail = 0;
 112:	10 92 60 00 	sts	0x0060, r1
  txHead = 0;
 116:	10 92 61 00 	sts	0x0061, r1
)
{

  flushTwiBuffers( );

  slaveAddress = ownAddress;
 11a:	80 93 85 00 	sts	0x0085, r24
  // low when a start condition is detected or a counter overflow (only
  // for USIWM1, USIWM0 = 11).  This inserts a wait state.  SCL is released
  // by the ISRs (USI_START_vect and USI_OVERFLOW_vect).

  // Set SCL and SDA as output
  DDR_USI |= ( 1 << PORT_USI_SCL ) | ( 1 << PORT_USI_SDA );
 11e:	87 b3       	in	r24, 0x17	; 23
 120:	85 60       	ori	r24, 0x05	; 5
 122:	87 bb       	out	0x17, r24	; 23

  // set SCL high
  PORT_USI |= ( 1 << PORT_USI_SCL );
 124:	c2 9a       	sbi	0x18, 2	; 24

  // set SDA high
  PORT_USI |= ( 1 << PORT_USI_SDA );
 126:	c0 9a       	sbi	0x18, 0	; 24

  // Set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 128:	b8 98       	cbi	0x17, 0	; 23

  USICR =
 12a:	88 ea       	ldi	r24, 0xA8	; 168
 12c:	8d b9       	out	0x0d, r24	; 13
       // no toggle clock-port pin
       ( 0 << USITC );

  // clear all interrupt flags and reset overflow counter

  USISR = ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) | ( 1 << USIPF ) | ( 1 << USIDC );
 12e:	80 ef       	ldi	r24, 0xF0	; 240
 130:	8e b9       	out	0x0e, r24	; 14
 132:	08 95       	ret

00000134 <usiTwiReceiveByte>:
  void
)
{

  // wait for Rx data
  while ( rxHead == rxTail );
 134:	90 91 73 00 	lds	r25, 0x0073
 138:	80 91 72 00 	lds	r24, 0x0072
 13c:	98 17       	cp	r25, r24
 13e:	d1 f3       	breq	.-12     	; 0x134 <usiTwiReceiveByte>

  // calculate buffer index
  rxTail = ( rxTail + 1 ) & TWI_RX_BUFFER_MASK;
 140:	80 91 72 00 	lds	r24, 0x0072
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	80 93 72 00 	sts	0x0072, r24

  // return data from the buffer.
  return rxBuf[ rxTail ];
 14c:	e0 91 72 00 	lds	r30, 0x0072
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ec 58       	subi	r30, 0x8C	; 140
 154:	ff 4f       	sbci	r31, 0xFF	; 255

} // end usiTwiReceiveByte
 156:	80 81       	ld	r24, Z
 158:	08 95       	ret

0000015a <usiTwiDataInReceiveBuffer>:
  void
)
{

  // return 0 (false) if the receive buffer is empty
  return rxHead != rxTail;
 15a:	20 91 73 00 	lds	r18, 0x0073
 15e:	90 91 72 00 	lds	r25, 0x0072
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	29 13       	cpse	r18, r25
 166:	01 c0       	rjmp	.+2      	; 0x16a <__stack+0xb>
 168:	80 e0       	ldi	r24, 0x00	; 0

} // end usiTwiDataInReceiveBuffer
 16a:	08 95       	ret

0000016c <__vector_13>:
                            USI Start Condition ISR

********************************************************************************/

ISR( USI_START_VECTOR )
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	8f 93       	push	r24

  // set default starting conditions for new TWI package
  overflowState = USI_SLAVE_CHECK_ADDRESS;
 178:	10 92 84 00 	sts	0x0084, r1

  // set SDA as input
  DDR_USI &= ~( 1 << PORT_USI_SDA );
 17c:	b8 98       	cbi	0x17, 0	; 23
  // wait for SCL to go low to ensure the Start Condition has completed (the
  // start detector will hold SCL low ) - if a Stop Condition arises then leave
  // the interrupt to prevent waiting forever - don't use USISR to test for Stop
  // Condition as in Application Note AVR312 because the Stop Condition Flag is
  // going to be set from the last TWI sequence
  while (
 17e:	b2 9b       	sbis	0x16, 2	; 22
 180:	02 c0       	rjmp	.+4      	; 0x186 <__vector_13+0x1a>
       // SCL his high
       ( PIN_USI & ( 1 << PIN_USI_SCL ) ) &&
 182:	b0 9b       	sbis	0x16, 0	; 22
 184:	fc cf       	rjmp	.-8      	; 0x17e <__vector_13+0x12>
       // and SDA is low
       !( ( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
  );


  if ( !( PIN_USI & ( 1 << PIN_USI_SDA ) ) )
 186:	b0 99       	sbic	0x16, 0	; 22
 188:	03 c0       	rjmp	.+6      	; 0x190 <__vector_13+0x24>
  {

    // a Stop Condition did not occur

    USICR =
 18a:	88 ef       	ldi	r24, 0xF8	; 248
 18c:	8d b9       	out	0x0d, r24	; 13
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__vector_13+0x28>
  }
  else
  {

    // a Stop Condition did occur
    USICR =
 190:	88 ea       	ldi	r24, 0xA8	; 168
 192:	8d b9       	out	0x0d, r24	; 13
         // no toggle clock-port pin
         ( 0 << USITC );

  } // end if

  USISR =
 194:	80 ef       	ldi	r24, 0xF0	; 240
 196:	8e b9       	out	0x0e, r24	; 14
       ( 1 << USI_START_COND_INT ) | ( 1 << USIOIF ) |
       ( 1 << USIPF ) |( 1 << USIDC ) |
       // set USI to sample 8 bits (count 16 external SCL pin toggles)
       ( 0x0 << USICNT0);

} // end ISR( USI_START_VECTOR )
 198:	8f 91       	pop	r24
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_14>:
Only disabled when waiting for a new Start Condition.

********************************************************************************/

ISR( USI_OVERFLOW_VECTOR )
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31

  switch ( overflowState )
 1b6:	80 91 84 00 	lds	r24, 0x0084
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <__vector_14+0x1c>
 1be:	51 c0       	rjmp	.+162    	; 0x262 <__vector_14+0xbe>
 1c0:	28 f4       	brcc	.+10     	; 0x1cc <__vector_14+0x28>
 1c2:	88 23       	and	r24, r24
 1c4:	59 f0       	breq	.+22     	; 0x1dc <__vector_14+0x38>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	69 f1       	breq	.+90     	; 0x224 <__vector_14+0x80>
 1ca:	6e c0       	rjmp	.+220    	; 0x2a8 <__vector_14+0x104>
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <__vector_14+0x2e>
 1d0:	50 c0       	rjmp	.+160    	; 0x272 <__vector_14+0xce>
 1d2:	00 f1       	brcs	.+64     	; 0x214 <__vector_14+0x70>
 1d4:	85 30       	cpi	r24, 0x05	; 5
 1d6:	09 f4       	brne	.+2      	; 0x1da <__vector_14+0x36>
 1d8:	53 c0       	rjmp	.+166    	; 0x280 <__vector_14+0xdc>
 1da:	66 c0       	rjmp	.+204    	; 0x2a8 <__vector_14+0x104>
  {

    // Address mode: check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK,
    // else reset USI
    case USI_SLAVE_CHECK_ADDRESS:
      if ( ( USIDR == 0 ) || ( ( USIDR >> 1 ) == slaveAddress) )
 1dc:	8f b1       	in	r24, 0x0f	; 15
 1de:	88 23       	and	r24, r24
 1e0:	31 f0       	breq	.+12     	; 0x1ee <__vector_14+0x4a>
 1e2:	9f b1       	in	r25, 0x0f	; 15
 1e4:	96 95       	lsr	r25
 1e6:	80 91 85 00 	lds	r24, 0x0085
 1ea:	98 13       	cpse	r25, r24
 1ec:	0e c0       	rjmp	.+28     	; 0x20a <__vector_14+0x66>
      {
          if ( USIDR & 0x01 )
 1ee:	78 9b       	sbis	0x0f, 0	; 15
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <__vector_14+0x56>
        {
          overflowState = USI_SLAVE_SEND_DATA;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 84 00 	sts	0x0084, r24
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <__vector_14+0x5c>
        }
        else
        {
          overflowState = USI_SLAVE_REQUEST_DATA;
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	80 93 84 00 	sts	0x0084, r24
        } // end if
        SET_USI_TO_SEND_ACK( );
 200:	1f b8       	out	0x0f, r1	; 15
 202:	b8 9a       	sbi	0x17, 0	; 23
 204:	8e e7       	ldi	r24, 0x7E	; 126
 206:	8e b9       	out	0x0e, r24	; 14
 208:	4f c0       	rjmp	.+158    	; 0x2a8 <__vector_14+0x104>
      }
      else
      {
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 20a:	88 ea       	ldi	r24, 0xA8	; 168
 20c:	8d b9       	out	0x0d, r24	; 13
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	8e b9       	out	0x0e, r24	; 14
 212:	4a c0       	rjmp	.+148    	; 0x2a8 <__vector_14+0x104>
      break;

    // Master write data mode: check reply and goto USI_SLAVE_SEND_DATA if OK,
    // else reset USI
    case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
      if ( USIDR )
 214:	8f b1       	in	r24, 0x0f	; 15
 216:	88 23       	and	r24, r24
 218:	29 f0       	breq	.+10     	; 0x224 <__vector_14+0x80>
      {
        // if NACK, the master does not want more data
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 21a:	88 ea       	ldi	r24, 0xA8	; 168
 21c:	8d b9       	out	0x0d, r24	; 13
 21e:	80 e7       	ldi	r24, 0x70	; 112
 220:	8e b9       	out	0x0e, r24	; 14
        return;
 222:	42 c0       	rjmp	.+132    	; 0x2a8 <__vector_14+0x104>

    // copy data from buffer to USIDR and set USI to shift byte
    // next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
    case USI_SLAVE_SEND_DATA:
      // Get data from Buffer
      if ( txHead != txTail )
 224:	90 91 61 00 	lds	r25, 0x0061
 228:	80 91 60 00 	lds	r24, 0x0060
 22c:	98 17       	cp	r25, r24
 22e:	a1 f0       	breq	.+40     	; 0x258 <__vector_14+0xb4>
      {
        txTail = ( txTail + 1 ) & TWI_TX_BUFFER_MASK;
 230:	80 91 60 00 	lds	r24, 0x0060
 234:	8f 5f       	subi	r24, 0xFF	; 255
 236:	8f 70       	andi	r24, 0x0F	; 15
 238:	80 93 60 00 	sts	0x0060, r24
        USIDR = txBuf[ txTail ];
 23c:	e0 91 60 00 	lds	r30, 0x0060
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	ee 59       	subi	r30, 0x9E	; 158
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 81       	ld	r24, Z
 248:	8f b9       	out	0x0f, r24	; 15
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
        return;
      } // end if
      overflowState = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	80 93 84 00 	sts	0x0084, r24
      SET_USI_TO_SEND_DATA( );
 250:	b8 9a       	sbi	0x17, 0	; 23
 252:	80 e7       	ldi	r24, 0x70	; 112
 254:	8e b9       	out	0x0e, r24	; 14
      break;
 256:	28 c0       	rjmp	.+80     	; 0x2a8 <__vector_14+0x104>
        USIDR = txBuf[ txTail ];
      }
      else
      {
        // the buffer is empty
        SET_USI_TO_TWI_START_CONDITION_MODE( );
 258:	88 ea       	ldi	r24, 0xA8	; 168
 25a:	8d b9       	out	0x0d, r24	; 13
 25c:	80 e7       	ldi	r24, 0x70	; 112
 25e:	8e b9       	out	0x0e, r24	; 14
        return;
 260:	23 c0       	rjmp	.+70     	; 0x2a8 <__vector_14+0x104>
      break;

    // set USI to sample reply from master
    // next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
    case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
      overflowState = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	80 93 84 00 	sts	0x0084, r24
      SET_USI_TO_READ_ACK( );
 268:	b8 98       	cbi	0x17, 0	; 23
 26a:	1f b8       	out	0x0f, r1	; 15
 26c:	8e e7       	ldi	r24, 0x7E	; 126
 26e:	8e b9       	out	0x0e, r24	; 14
      break;
 270:	1b c0       	rjmp	.+54     	; 0x2a8 <__vector_14+0x104>

    // Master read data mode: set USI to sample data from master, next
    // USI_SLAVE_GET_DATA_AND_SEND_ACK
    case USI_SLAVE_REQUEST_DATA:
      overflowState = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	80 93 84 00 	sts	0x0084, r24
      SET_USI_TO_READ_DATA( );
 278:	b8 98       	cbi	0x17, 0	; 23
 27a:	80 e7       	ldi	r24, 0x70	; 112
 27c:	8e b9       	out	0x0e, r24	; 14
      break;
 27e:	14 c0       	rjmp	.+40     	; 0x2a8 <__vector_14+0x104>
    // copy data from USIDR and send ACK
    // next USI_SLAVE_REQUEST_DATA
    case USI_SLAVE_GET_DATA_AND_SEND_ACK:
      // put data into buffer
      // Not necessary, but prevents warnings
      rxHead = ( rxHead + 1 ) & TWI_RX_BUFFER_MASK;
 280:	80 91 73 00 	lds	r24, 0x0073
 284:	8f 5f       	subi	r24, 0xFF	; 255
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	80 93 73 00 	sts	0x0073, r24
      rxBuf[ rxHead ] = USIDR;
 28c:	e0 91 73 00 	lds	r30, 0x0073
 290:	8f b1       	in	r24, 0x0f	; 15
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	ec 58       	subi	r30, 0x8C	; 140
 296:	ff 4f       	sbci	r31, 0xFF	; 255
 298:	80 83       	st	Z, r24
      // next USI_SLAVE_REQUEST_DATA
      overflowState = USI_SLAVE_REQUEST_DATA;
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	80 93 84 00 	sts	0x0084, r24
      SET_USI_TO_SEND_ACK( );
 2a0:	1f b8       	out	0x0f, r1	; 15
 2a2:	b8 9a       	sbi	0x17, 0	; 23
 2a4:	8e e7       	ldi	r24, 0x7E	; 126
 2a6:	8e b9       	out	0x0e, r24	; 14
      break;

  } // end switch

} // end ISR( USI_OVERFLOW_VECTOR )
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
